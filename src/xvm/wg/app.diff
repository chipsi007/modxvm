diff -Naur app.orig/App.as app/App.as
--- app.orig/App.as	2014-12-05 00:31:29.648508800 +0200
+++ app/App.as	2014-12-05 11:11:54.667324900 +0200
@@ -1,5 +1,6 @@
 package
 {
+    $AppLinks;
     import net.wg.app.IApplication;
     import net.wg.infrastructure.base.meta.IGlobalVarsMgrMeta;
     import net.wg.infrastructure.managers.ISoundManager;
diff -Naur app.orig/net/wg/gui/components/advanced/TankIcon.as app/net/wg/gui/components/advanced/TankIcon.as
--- app.orig/net/wg/gui/components/advanced/TankIcon.as	2014-12-05 00:36:35.690318800 +0200
+++ app/net/wg/gui/components/advanced/TankIcon.as	2014-12-05 11:11:54.670325200 +0200
@@ -96,7 +96,7 @@
         
         private var _isPremiumDirty:Boolean = true;
         
-        private var DIRTY_FLAGS:Array = [this._showMultyXpDirty,this._showXpDirty,this._showNameDirty,this._nationDirty,this._imageDirty,this._tankTypeDirty,this._levelDirty,this._multyXpValDirty,this._xpValDirty,this._tankNameDirty,this._isRentDirty,this._isEliteDirty,this._isPremiumDirty];
+        public var DIRTY_FLAGS:Array = [_showMultyXpDirty,_showXpDirty,_showNameDirty,_nationDirty,_imageDirty,_tankTypeDirty,_levelDirty,_multyXpValDirty,_xpValDirty,_tankNameDirty,_isRentDirty,_isEliteDirty,_isPremiumDirty];
         
         override protected function onDispose() : void
         {
diff -Naur app.orig/net/wg/gui/components/common/video/SimpleVideoPlayer.as app/net/wg/gui/components/common/video/SimpleVideoPlayer.as
--- app.orig/net/wg/gui/components/common/video/SimpleVideoPlayer.as	2014-12-05 00:34:21.040148400 +0200
+++ app/net/wg/gui/components/common/video/SimpleVideoPlayer.as	2014-12-05 11:11:54.673325500 +0200
@@ -311,10 +311,10 @@
         }
     }
     
-    public function get metaData() : Object
-    {
-        return this._metaData;
-    }
+    //public function get metaData() : Object
+    //{
+    //    return this._metaData;
+    //}
     
     public function get currentTime() : Number
     {
diff -Naur app.orig/net/wg/gui/components/controls/Carousel.as app/net/wg/gui/components/controls/Carousel.as
--- app.orig/net/wg/gui/components/controls/Carousel.as	2014-12-05 00:34:24.086284800 +0200
+++ app/net/wg/gui/components/controls/Carousel.as	2014-12-05 11:11:54.677325900 +0200
@@ -91,9 +91,9 @@
         
         protected var selectedItemRenderer:IListItemRenderer = null;
         
-        private var scopeWidth:Number = 0;
+        protected var scopeWidth:Number = 0;
         
-        private var courseFactor:Number = 0;
+        protected var courseFactor:Number = 0;
         
         private var slideAcceleratorAfterDrag:Number = 16;
         
@@ -617,7 +617,7 @@
     
 }
 
-private function getCurrentFirstRendererOnAnim() : Number
+protected function getCurrentFirstRendererOnAnim() : Number
 {
     var _loc1_:* = NaN;
     if(!container || !_renderers)
@@ -748,7 +748,7 @@
 this.courseFactor = 0;
 }
 
-private function arrowSlide() : void
+protected function arrowSlide() : void
 {
 var _loc1_:* = NaN;
 var _loc2_:* = NaN;
diff -Naur app.orig/net/wg/gui/components/controls/ScrollPane.as app/net/wg/gui/components/controls/ScrollPane.as
--- app.orig/net/wg/gui/components/controls/ScrollPane.as	2014-12-05 00:34:02.552057900 +0200
+++ app/net/wg/gui/components/controls/ScrollPane.as	2014-12-05 11:31:41.551001400 +0200
@@ -196,7 +196,7 @@
         override protected function onDispose() : void
         {
             var _loc1_:DisplayObject = null;
-            this._isScrollBarHaveToBeShown = null;
+            this._isScrollBarHaveToBeShown = false;
             super.onDispose();
             this.thumbOffset = null;
             if(this._scrollBar)
diff -Naur app.orig/net/wg/gui/components/tooltips/helpers/Utils.as app/net/wg/gui/components/tooltips/helpers/Utils.as
--- app.orig/net/wg/gui/components/tooltips/helpers/Utils.as	2014-12-05 00:35:50.457476700 +0200
+++ app/net/wg/gui/components/tooltips/helpers/Utils.as	2014-12-05 11:11:54.681326300 +0200
@@ -71,7 +71,7 @@
         
         public var STATUS_INFO:String = "info";
         
-        public var allowStatuses:Array = [this.STATUS_ADDITIONAL,this.STATUS_RENTED,this.STATUS_CRITICAL,this.STATUS_WARNING,this.STATUS_INFO];
+        public var allowStatuses:Array = [STATUS_ADDITIONAL,STATUS_RENTED,STATUS_CRITICAL,STATUS_WARNING,STATUS_INFO];
         
         public var MARGIN_AFTER_BLOCK:Number = 15;
         
diff -Naur app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as app/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as
--- app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as	2014-12-05 00:39:55.491306400 +0200
+++ app/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as	2014-12-05 11:11:54.685326700 +0200
@@ -83,9 +83,9 @@
         
         private var filterDataInvalid:Boolean = false;
         
-        private var nationFilter:DropDownImageText;
+        private var nationFilter:net.wg.gui.components.controls.DropDownImageText;
         
-        private var tankFilter:DropDownImageText;
+        private var tankFilter:net.wg.gui.components.controls.DropDownImageText;
         
         private var checkBoxToMain:CheckBox;
         
@@ -109,9 +109,9 @@
         
         private var _vehiclesVOManager:VehicleCarouselVOManager = null;
         
-        private var _slotForBuySlot:IListItemRenderer = null;
+        protected var _slotForBuySlot:IListItemRenderer = null;
         
-        private var _slotForBuyVehicle:IListItemRenderer = null;
+        protected var _slotForBuyVehicle:IListItemRenderer = null;
         
         private var _updateInProgress:Boolean = false;
         
@@ -759,7 +759,7 @@
             this.checkBoxToMain.addEventListener(Event.SELECT,this.onFilterCheckBoxChanged);
         }
         
-        private function showHideFilters() : void
+        protected function showHideFilters() : void
         {
             updateVisibleSlotsCount();
             var _loc1_:Boolean = _visibleSlots < this._createdRendersListByCompDescrLength || !(this._createdRendersListByCompDescrLength == this._currentShowByCompactDescription.length);
diff -Naur app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as.orig app/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as.orig
--- app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as.orig	1970-01-01 02:00:00.000000000 +0200
+++ app/net/wg/gui/lobby/hangar/tcarousel/TankCarousel.as.orig	2014-12-05 00:39:55.491306400 +0200
@@ -0,0 +1,1133 @@
+package net.wg.gui.lobby.hangar.tcarousel
+{
+    import net.wg.infrastructure.base.meta.impl.TankCarouselMeta;
+    import net.wg.infrastructure.base.meta.ITankCarouselMeta;
+    import net.wg.infrastructure.interfaces.IDAAPIModule;
+    import net.wg.gui.interfaces.IHelpLayoutComponent;
+    import flash.display.MovieClip;
+    import net.wg.gui.components.controls.SoundButton;
+    import net.wg.gui.components.controls.DropDownImageText;
+    import net.wg.gui.components.controls.CheckBox;
+    import net.wg.gui.components.controls.VO.ActionPriceVO;
+    import scaleform.clik.interfaces.IListItemRenderer;
+    import net.wg.gui.lobby.hangar.tcarousel.helper.VehicleCarouselVOManager;
+    import flash.display.DisplayObject;
+    import scaleform.clik.events.ListEvent;
+    import flash.events.Event;
+    import flash.events.MouseEvent;
+    import flash.display.DisplayObjectContainer;
+    import net.wg.gui.lobby.hangar.tcarousel.data.VehicleCarouselVO;
+    import scaleform.clik.constants.InvalidationType;
+    import flash.geom.Rectangle;
+    import net.wg.utils.IHelpLayout;
+    import net.wg.data.constants.Directions;
+    import net.wg.gui.events.ListEventEx;
+    import net.wg.data.constants.Tooltips;
+    import scaleform.clik.events.ButtonEvent;
+    import net.wg.gui.lobby.hangar.tcarousel.helper.VehicleCarouselVOBuilder;
+    import scaleform.clik.data.DataProvider;
+    import net.wg.utils.INations;
+    import net.wg.data.constants.generated.CONTEXT_MENU_HANDLER_TYPE;
+    import scaleform.clik.data.ListData;
+    import net.wg.data.constants.VehicleState;
+    
+    public class TankCarousel extends TankCarouselMeta implements ITankCarouselMeta, IDAAPIModule, IHelpLayoutComponent
+    {
+        
+        public function TankCarousel()
+        {
+            this.filterData = {};
+            super();
+            dragHitArea = this.dragHitArea1;
+            if(leftArrow)
+            {
+                leftArrow.dispose();
+            }
+            leftArrow = this.leftArrow1;
+            if(rightArrow)
+            {
+                rightArrow.dispose();
+            }
+            rightArrow = this.rightArrow1;
+            if(renderersMask)
+            {
+                renderersMask.dispose();
+            }
+            renderersMask = this.renderersMask1;
+            this.nationFilter = this.vehicleFilters.nationFilter;
+            this.tankFilter = this.vehicleFilters.tankFilter;
+            this.checkBoxToMain = this.vehicleFilters.checkBoxToMain;
+            bg = this.bg1;
+            this._currentShowByCompactDescription = [];
+        }
+        
+        public static var FILTERS_CAROUSEL_OFFSET:Number = 15;
+        
+        public static var VO_VEHICLES_IS_INVALID:String = "vo_vehicles_is_invalid";
+        
+        public var vehicleFilters:TankCarouselFilters;
+        
+        public var dragHitArea1:MovieClip;
+        
+        public var leftArrow1:SoundButton;
+        
+        public var rightArrow1:SoundButton;
+        
+        public var renderersMask1:MovieClip;
+        
+        public var bg1:MovieClip;
+        
+        private var _isDAAPIInited:Boolean = false;
+        
+        private var filterData:Object;
+        
+        private var filterDataInvalid:Boolean = false;
+        
+        private var nationFilter:DropDownImageText;
+        
+        private var tankFilter:DropDownImageText;
+        
+        private var checkBoxToMain:CheckBox;
+        
+        private var _slotPrice:Number = 0;
+        
+        private var _slotPriceActionData:ActionPriceVO = null;
+        
+        private var _selectedVehicleCompactID:Number = -1;
+        
+        private var _availableSlotsForBuyVehicle:Number = 0;
+        
+        private var _updateShowByCompactDescription:Array = null;
+        
+        private var _currentShowByCompactDescription:Array = null;
+        
+        private var _currentShowRendersByIndex:Vector.<IListItemRenderer> = null;
+        
+        private var _createdRendersListByCompDescr:Object = null;
+        
+        private var _createdRendersListByCompDescrLength:Number = 0;
+        
+        private var _vehiclesVOManager:VehicleCarouselVOManager = null;
+        
+        private var _slotForBuySlot:IListItemRenderer = null;
+        
+        private var _slotForBuyVehicle:IListItemRenderer = null;
+        
+        private var _updateInProgress:Boolean = false;
+        
+        private var _rendererHelpLayout:DisplayObject;
+        
+        private var _filtersHelpLayout:DisplayObject;
+        
+        private var skipScrollToIndex:Boolean = false;
+        
+        override public function scrollToIndex(param1:uint) : void
+        {
+            var _loc2_:uint = 0;
+            if((container) && (_renderers))
+            {
+                _loc2_ = Math.floor(_visibleSlots / 2);
+                _loc2_ = _visibleSlots % 2 == 1?_loc2_:_loc2_ - 1;
+                currentFirstRenderer = Math.min(_renderers.length - _visibleSlots,Math.max(0,param1 - _loc2_));
+                goToFirstRenderer();
+            }
+        }
+        
+        public function as_isDAAPIInited() : Boolean
+        {
+            return this._isDAAPIInited;
+        }
+        
+        public function get isDAAPIInited() : Boolean
+        {
+            return this._isDAAPIInited;
+        }
+        
+        public function as_populate() : void
+        {
+            this._isDAAPIInited = true;
+        }
+        
+        public function as_dispose() : void
+        {
+            var _loc1_:String = null;
+            this.tankFilter.removeEventListener(ListEvent.INDEX_CHANGE,this.onVehicleTypeFilterChanged);
+            this.checkBoxToMain.removeEventListener(Event.SELECT,this.onFilterCheckBoxChanged);
+            this.nationFilter.removeEventListener(ListEvent.INDEX_CHANGE,this.onNationFilterChanged);
+            leftArrow.removeEventListener(MouseEvent.MOUSE_WHEEL,this.handleMouseWheel);
+            rightArrow.removeEventListener(MouseEvent.MOUSE_WHEEL,this.handleMouseWheel);
+            App.contextMenuMgr.hide();
+            this.vehicleFilters.dispose();
+            this.vehicleFilters = null;
+            this.dragHitArea1 = null;
+            this.leftArrow1 = null;
+            this.rightArrow1 = null;
+            this.renderersMask1 = null;
+            this.bg1 = null;
+            for(_loc1_ in this.filterData)
+            {
+                delete this.filterData[_loc1_];
+                true;
+            }
+            this.filterData = null;
+            this.nationFilter = null;
+            this.tankFilter = null;
+            this.checkBoxToMain = null;
+            this._rendererHelpLayout = null;
+            this._filtersHelpLayout = null;
+            this._vehiclesVOManager.clear();
+            this._vehiclesVOManager = null;
+            this.removeEmptySlots();
+            if(this._slotForBuySlot)
+            {
+                this.cleanUpRenderer(this._slotForBuySlot);
+                this._slotForBuySlot = null;
+            }
+            if(this._slotForBuyVehicle)
+            {
+                this.cleanUpRenderer(this._slotForBuyVehicle);
+                this._slotForBuyVehicle = null;
+            }
+            this.clearArrays(true);
+            var _loc2_:DisplayObjectContainer = container;
+            super.onDispose();
+            App.utils.asserter.assert(_loc2_.numChildren == 0,"container is not empty after dispose!");
+        }
+        
+        override protected function cleanUpRenderer(param1:IListItemRenderer) : void
+        {
+            var _loc2_:Number = _renderers.indexOf(param1);
+            if(_loc2_ != -1)
+            {
+                _renderers.splice(_loc2_,1);
+            }
+            if(container.contains(DisplayObject(param1)))
+            {
+                container.removeChild(DisplayObject(param1));
+            }
+            super.cleanUpRenderer(param1);
+        }
+        
+        public function as_setCarouselFilter(param1:Object) : void
+        {
+            this.filterData = param1;
+            this.filterDataInvalid = true;
+            this.updateFiltersData();
+        }
+        
+        public function as_setParams(param1:Object) : void
+        {
+            var _loc5_:IListItemRenderer = null;
+            var _loc6_:VehicleCarouselVO = null;
+            var _loc7_:DisplayObject = null;
+            this._slotPrice = param1.slotPrice is Array?param1.slotPrice[0] > 0?param1.slotPrice[0]:param1.slotPrice[1]:param1.slotPrice;
+            var _loc2_:Object = (param1.hasOwnProperty("slotPriceActionData")) && !(param1.slotPriceActionData == undefined)?param1.slotPriceActionData:null;
+            if(_loc2_)
+            {
+                this._slotPriceActionData = new ActionPriceVO(_loc2_);
+            }
+            this._selectedVehicleCompactID = param1.selectedTankID;
+            var _loc3_:Number = param1.freeSlots;
+            if(this._slotForBuySlot != null)
+            {
+                this.updateSlotForBuySlot(true);
+            }
+            var _loc4_:* = !(_loc3_ == this._availableSlotsForBuyVehicle);
+            if(this._slotForBuyVehicle != null)
+            {
+                this._availableSlotsForBuyVehicle = _loc3_;
+                _totalRenderers = this._availableSlotsForBuyVehicle > 0?this._currentShowRendersByIndex.length + 2:this._currentShowRendersByIndex.length + 1;
+                if((_loc4_) || this._availableSlotsForBuyVehicle <= 0)
+                {
+                    this.removeEmptySlots();
+                    _loc5_ = getRendererAt(_renderers.length - 1,0);
+                    _loc6_ = (_loc5_ as TankCarouselItemRenderer).dataVO;
+                    if(_loc6_.buySlot)
+                    {
+                        _renderers.splice(_renderers.length - 1,1);
+                    }
+                    _loc5_ = getRendererAt(_renderers.length - 1,0);
+                    _loc6_ = (_loc5_ as TankCarouselItemRenderer).dataVO;
+                    if(this._availableSlotsForBuyVehicle <= 0)
+                    {
+                        if(_loc6_.buyTank)
+                        {
+                            _renderers.splice(_renderers.length - 1,1);
+                            _loc5_.x = 0;
+                            _loc7_ = _loc5_ as DisplayObject;
+                            _loc7_.visible = false;
+                        }
+                    }
+                    else
+                    {
+                        if(!_loc6_.buyTank)
+                        {
+                            this._slotForBuyVehicle.x = padding.horizontal + _renderers.length * slotWidth;
+                            _renderers.push(this._slotForBuyVehicle);
+                        }
+                        _loc7_ = this._slotForBuyVehicle as DisplayObject;
+                        _loc7_.visible = true;
+                        this.updateSlotForBuyVehicle(true);
+                    }
+                    this._slotForBuySlot.x = padding.horizontal + _renderers.length * slotWidth;
+                    _renderers.push(this._slotForBuySlot);
+                    this.addEmptySlots();
+                    invalidateSize();
+                }
+                else
+                {
+                    this.updateSlotForBuyVehicle(this._availableSlotsForBuyVehicle > 0);
+                }
+            }
+            else
+            {
+                this._availableSlotsForBuyVehicle = _loc3_;
+                if(!_renderers)
+                {
+                    return;
+                }
+                this.removeEmptySlots();
+                this.removeAdvancedSlots();
+                this.addAdvancedSlots();
+                this.addEmptySlots();
+                invalidateSize();
+            }
+            if(this._currentShowByCompactDescription)
+            {
+                this.selectedIndex = this._currentShowByCompactDescription.indexOf(this._selectedVehicleCompactID);
+                if(!this.skipScrollToIndex)
+                {
+                    this.scrollToIndex(this.selectedIndex);
+                }
+                this.skipScrollToIndex = false;
+            }
+            if(this._createdRendersListByCompDescr)
+            {
+                _loc5_ = this._createdRendersListByCompDescr[this._selectedVehicleCompactID] as IListItemRenderer;
+                if(_loc5_)
+                {
+                    _loc5_.selected = true;
+                    selectedItemRenderer = _loc5_;
+                }
+            }
+        }
+        
+        public function as_updateVehicles(param1:Object, param2:Boolean) : void
+        {
+            this._updateInProgress = true;
+            if(!this._vehiclesVOManager)
+            {
+                this._vehiclesVOManager = new VehicleCarouselVOManager();
+            }
+            if(param2)
+            {
+                this._vehiclesVOManager.setData(param1);
+            }
+            else
+            {
+                this._vehiclesVOManager.updateData(param1);
+            }
+            invalidate(VO_VEHICLES_IS_INVALID);
+        }
+        
+        public function as_showVehicles(param1:Array) : void
+        {
+            this._updateShowByCompactDescription = param1;
+            if(!this._updateInProgress)
+            {
+                invalidate(InvalidationType.RENDERERS);
+            }
+        }
+        
+        public function showHelpLayout() : void
+        {
+            var _loc2_:Rectangle = null;
+            var _loc3_:Object = null;
+            var _loc4_:* = NaN;
+            var _loc5_:Rectangle = null;
+            var _loc6_:Object = null;
+            var _loc1_:IHelpLayout = App.utils.helpLayout;
+            if(container)
+            {
+                _loc2_ = new Rectangle(leftArrow.x,container.y,rightArrow.x - leftArrow.x,slotImageHeight);
+                _loc3_ = _loc1_.getProps(_loc2_,LOBBY_HELP.HANGAR_VEHICLE_CAROUSEL,Directions.RIGHT);
+                this._rendererHelpLayout = _loc1_.create(root,_loc3_,this);
+            }
+            if(this.vehicleFilters.visible)
+            {
+                _loc4_ = 5;
+                _loc5_ = new Rectangle(this.vehicleFilters.x - _loc4_,this.vehicleFilters.y,this.vehicleFilters.width + _loc4_ * 2,slotImageHeight);
+                _loc6_ = _loc1_.getProps(_loc5_,LOBBY_HELP.HANGAR_VEHFILTERS,Directions.RIGHT);
+                this._filtersHelpLayout = _loc1_.create(root,_loc6_,this);
+            }
+        }
+        
+        public function closeHelpLayout() : void
+        {
+            var _loc1_:IHelpLayout = App.utils.helpLayout;
+            if(this._rendererHelpLayout)
+            {
+                _loc1_.destroy(this._rendererHelpLayout);
+                this._rendererHelpLayout = null;
+            }
+            if(this._filtersHelpLayout)
+            {
+                _loc1_.destroy(this._filtersHelpLayout);
+                this._filtersHelpLayout = null;
+            }
+        }
+        
+        public function onFilterChanged() : void
+        {
+            setVehiclesFilterS(this.filterData.nation,this.filterData.tankType,this.filterData.ready);
+        }
+        
+        override public function get selectedIndex() : int
+        {
+            return _selectedIndex;
+        }
+        
+        override public function set selectedIndex(param1:int) : void
+        {
+            var _loc2_:IListItemRenderer = null;
+            if(selectedItemRenderer)
+            {
+                selectedItemRenderer.selected = false;
+            }
+            if(param1 >= 0)
+            {
+                _loc2_ = this._currentShowRendersByIndex[param1];
+                if(_loc2_)
+                {
+                    _loc2_.selected = true;
+                    selectedItemRenderer = _loc2_;
+                }
+                else
+                {
+                    selectedItemRenderer = null;
+                }
+            }
+            else
+            {
+                selectedItemRenderer = null;
+            }
+            _selectedIndex = param1;
+        }
+        
+        override public function set enabled(param1:Boolean) : void
+        {
+            var _loc2_:String = null;
+            var _loc3_:IListItemRenderer = null;
+            var _loc4_:VehicleCarouselVO = null;
+            super.enabled = param1;
+            if(this._createdRendersListByCompDescr != null)
+            {
+                for(_loc2_ in this._createdRendersListByCompDescr)
+                {
+                    _loc3_ = this._createdRendersListByCompDescr[_loc2_];
+                    _loc4_ = this._vehiclesVOManager.getVOByCD(Number(_loc2_));
+                    if(_loc3_ != null)
+                    {
+                        _loc3_.enabled = _loc4_?this.getItemEnabledState(_loc4_):enabled;
+                    }
+                }
+            }
+        }
+        
+        public function get disposed() : Boolean
+        {
+            return false;
+        }
+        
+        override protected function configUI() : void
+        {
+            this.initFilters();
+            leftArrow.mouseEnabledOnDisabled = rightArrow.mouseEnabledOnDisabled = true;
+            leftArrow.addEventListener(MouseEvent.MOUSE_WHEEL,this.handleMouseWheel,false,0,true);
+            rightArrow.addEventListener(MouseEvent.MOUSE_WHEEL,this.handleMouseWheel,false,0,true);
+            super.configUI();
+        }
+        
+        override protected function draw() : void
+        {
+            var _loc1_:* = NaN;
+            var _loc2_:* = NaN;
+            var _loc3_:* = NaN;
+            if(isInvalid(VO_VEHICLES_IS_INVALID))
+            {
+                this.rebuildRenderers();
+                this._vehiclesVOManager.clearAndInitDynamicData();
+                this._updateInProgress = false;
+            }
+            if((isInvalid(InvalidationType.RENDERERS)) && !(this._updateShowByCompactDescription == null))
+            {
+                clearAllAnimIntervals();
+                if(isDragging)
+                {
+                    clearDragProps();
+                }
+                _loc1_ = 0;
+                _loc2_ = 0;
+                _loc3_ = 0;
+                _loc1_ = 0;
+                while(_loc1_ < this._currentShowByCompactDescription.length)
+                {
+                    _loc3_ = this._currentShowByCompactDescription[_loc1_];
+                    _loc2_ = this._updateShowByCompactDescription.indexOf(_loc3_);
+                    if(_loc2_ == -1)
+                    {
+                        this._currentShowByCompactDescription.splice(_loc1_,1);
+                        this.removeRendererFromShowByCompactDescr(_loc3_);
+                    }
+                    else
+                    {
+                        _loc1_++;
+                    }
+                }
+                if(!this._currentShowByCompactDescription)
+                {
+                    this._currentShowByCompactDescription = [];
+                }
+                if(!this._currentShowRendersByIndex)
+                {
+                    this._currentShowRendersByIndex = new Vector.<IListItemRenderer>();
+                }
+                if(!_renderers)
+                {
+                    _renderers = new Vector.<IListItemRenderer>();
+                }
+                this.removeEmptySlots();
+                this.removeAdvancedSlots();
+                this.clearArrays(false);
+                _loc1_ = 0;
+                while(_loc1_ < this._updateShowByCompactDescription.length)
+                {
+                    _loc3_ = this._updateShowByCompactDescription[_loc1_];
+                    this._currentShowByCompactDescription[_loc1_] = _loc3_;
+                    this.insertRendererToShowByNum(_loc1_,_loc3_);
+                    _loc1_++;
+                }
+                while(this._updateShowByCompactDescription.length)
+                {
+                    this._updateShowByCompactDescription.pop();
+                }
+                this._updateShowByCompactDescription = null;
+                this.showHideFilters();
+                this.addAdvancedSlots();
+                this.addEmptySlots();
+                this.repositionRenderers();
+                invalidateSize();
+            }
+            if(isInvalid(InvalidationType.SIZE))
+            {
+                this.showHideFilters();
+                this.updateEmptySlots();
+                updateLayout();
+            }
+            super.draw();
+        }
+        
+        override protected function initUIStartPosition() : void
+        {
+            this.vehicleFilters.x = contentMargin;
+            this.vehicleFilters.y = contentMargin;
+            super.initUIStartPosition();
+        }
+        
+        override protected function updateArrowsState() : void
+        {
+            super.updateArrowsState();
+        }
+        
+        override protected function setupRenderer(param1:IListItemRenderer) : void
+        {
+            super.setupRenderer(param1);
+        }
+        
+        override protected function handleMouseWheel(param1:MouseEvent) : void
+        {
+            if((enabled) && (allowDrag) && !isPreDragging && !(param1.target == bg))
+            {
+                super.handleMouseWheel(param1);
+            }
+        }
+        
+        override protected function onItemRollOver(param1:ListEventEx) : void
+        {
+            super.onItemRollOver(param1);
+            if(isSliding)
+            {
+                return;
+            }
+            var _loc2_:VehicleCarouselVO = param1.itemData as VehicleCarouselVO;
+            if(_loc2_.empty)
+            {
+                return;
+            }
+            if(_loc2_.buyTank)
+            {
+                App.toolTipMgr.showComplex(TOOLTIPS.TANKS_CAROUSEL_BUY_VEHICLE);
+                return;
+            }
+            if(_loc2_.buySlot)
+            {
+                App.toolTipMgr.showComplex(TOOLTIPS.TANKS_CAROUSEL_BUY_SLOT);
+                return;
+            }
+            App.toolTipMgr.showSpecial(Tooltips.CAROUSEL_VEHICLE,null,_loc2_.inventoryId);
+        }
+        
+        override protected function onItemRollOut(param1:ListEventEx) : void
+        {
+            super.onItemRollOut(param1);
+            App.toolTipMgr.hide();
+        }
+        
+        override protected function onItemStartDrag(param1:ListEventEx) : void
+        {
+            App.toolTipMgr.hide();
+            super.onItemStartDrag(param1);
+        }
+        
+        override protected function handleItemClick(param1:ButtonEvent) : void
+        {
+            App.toolTipMgr.hide();
+            if(isMoving)
+            {
+                isMoving = false;
+                return;
+            }
+            var _loc2_:TankCarouselItemRenderer = param1.currentTarget as TankCarouselItemRenderer;
+            var _loc3_:VehicleCarouselVO = _loc2_.dataVO;
+            var _loc4_:Number = _loc2_.index;
+            var _loc5_:uint = (param1 as ButtonEvent).buttonIdx;
+            if(isNaN(_loc4_))
+            {
+                return;
+            }
+            if(dispatchItemEvent(param1))
+            {
+                if(((useRightButton) && (useRightButtonForSelect) || _loc5_ == 0) && !_loc3_.buyTank && !_loc3_.buySlot)
+                {
+                    this.selectedIndex = this._currentShowByCompactDescription.indexOf(_loc3_.compactDescr);
+                }
+            }
+        }
+        
+        override protected function onItemClick(param1:ListEventEx) : void
+        {
+            var _loc2_:VehicleCarouselVO = param1.itemData as VehicleCarouselVO;
+            if(_loc2_.empty)
+            {
+                return;
+            }
+            if((_loc2_.buyTank) && param1.buttonIdx == 0)
+            {
+                (param1.itemRenderer as MovieClip).mouseEnabled = false;
+                (param1.itemRenderer as MovieClip).mouseChildren = false;
+                this.tryBuyTank(_loc2_);
+                this.skipScrollToIndex = true;
+                return;
+            }
+            if((_loc2_.buySlot) && param1.buttonIdx == 0)
+            {
+                this.skipScrollToIndex = true;
+                this.tryBuySlot(_loc2_);
+                return;
+            }
+            if(param1.buttonIdx == 0)
+            {
+                this.skipScrollToIndex = true;
+                this.selectItem(_loc2_.id);
+            }
+            else if(param1.buttonIdx == 1 && !_loc2_.buyTank && !_loc2_.buySlot)
+            {
+                this.showContextMenu(_loc2_.inventoryId);
+            }
+            
+        }
+        
+        private function updateSlotForBuyVehicle(param1:Boolean) : void
+        {
+            this.populateRendererData(this._currentShowRendersByIndex.length,this._slotForBuyVehicle,VehicleCarouselVOBuilder.instance.getDataVoForBuyVehicle(this._availableSlotsForBuyVehicle),param1,true);
+        }
+        
+        private function updateSlotForBuySlot(param1:Boolean) : void
+        {
+            this.populateRendererData(this._currentShowRendersByIndex.length,this._slotForBuySlot,VehicleCarouselVOBuilder.instance.getDataVoForBuySlot(this._slotPrice,this._slotPriceActionData),param1,true);
+        }
+        
+        private function tryBuyTank(param1:VehicleCarouselVO) : void
+        {
+            buyTankClickS();
+        }
+        
+        private function tryBuySlot(param1:VehicleCarouselVO) : void
+        {
+            buySlotS();
+        }
+        
+        private function selectItem(param1:Number) : void
+        {
+            vehicleChangeS(param1.toString());
+        }
+        
+        private function clearArrays(param1:Boolean) : void
+        {
+            var _loc2_:IListItemRenderer = null;
+            var _loc3_:Array = null;
+            var _loc4_:String = null;
+            var _loc5_:* = NaN;
+            if(param1)
+            {
+                if(this._createdRendersListByCompDescr)
+                {
+                    _loc3_ = [];
+                    for(_loc4_ in this._createdRendersListByCompDescr)
+                    {
+                        _loc3_.push(_loc4_);
+                    }
+                    for each(_loc4_ in _loc3_)
+                    {
+                        _loc2_ = IListItemRenderer(this._createdRendersListByCompDescr[_loc4_]);
+                        _loc5_ = this._currentShowRendersByIndex.indexOf(_loc2_);
+                        if(_loc5_ != -1)
+                        {
+                            this._currentShowRendersByIndex.splice(_loc5_,1);
+                        }
+                        this.cleanUpRenderer(_loc2_);
+                        delete this._createdRendersListByCompDescr[_loc4_];
+                        true;
+                    }
+                    _loc3_.splice(0,_loc3_.length);
+                    this._createdRendersListByCompDescr = null;
+                }
+                this._createdRendersListByCompDescrLength = 0;
+                if(this._currentShowRendersByIndex)
+                {
+                    for each(_loc2_ in this._currentShowRendersByIndex)
+                    {
+                        this.cleanUpRenderer(_loc2_);
+                    }
+                    this._currentShowRendersByIndex.splice(0,this._currentShowRendersByIndex.length);
+                    this._currentShowRendersByIndex = null;
+                }
+                this._currentShowRendersByIndex = null;
+            }
+            else
+            {
+                this._currentShowRendersByIndex.splice(0,this._currentShowRendersByIndex.length);
+                this._currentShowByCompactDescription.splice(0,this._currentShowByCompactDescription.length);
+                if(_renderers)
+                {
+                    _renderers.splice(0,_renderers.length);
+                }
+            }
+            this._currentShowByCompactDescription.splice(0,this._currentShowByCompactDescription.length);
+        }
+        
+        private function initFilters() : void
+        {
+            this.tankFilter.dataProvider = new DataProvider(getVehicleTypeProviderS());
+            this.tankFilter.menuRowCount = this.tankFilter.dataProvider.length;
+            var _loc1_:INations = App.utils.nations;
+            var _loc2_:Array = _loc1_.getNationsData();
+            var _loc3_:Array = [this.vehicleFilters.createFilterItem(MENU.NATIONS_ALL,TankCarouselFilters.FILTER_ALL_NATION,RES_ICONS.MAPS_ICONS_FILTERS_NATIONS_ALL)];
+            if(App.globalVarsMgr.isKoreaS())
+            {
+                _loc3_.push(this.vehicleFilters.createFilterItem(MENU.CAROUSELFILTER_IGR,TankCarouselFilters.FILTER_IGR_NATION,RES_ICONS.MAPS_ICONS_FILTERS_NATIONS_IGR));
+            }
+            var _loc4_:uint = 0;
+            while(_loc4_ < _loc2_.length)
+            {
+                _loc2_[_loc4_]["icon"] = "../maps/icons/filters/nations/" + _loc1_.getNationName(_loc2_[_loc4_]["data"]) + ".png";
+                _loc3_.push(_loc2_[_loc4_]);
+                _loc4_++;
+            }
+            this.nationFilter.dataProvider = new DataProvider(_loc3_);
+            if(!this.filterData.hasOwnProperty("nation"))
+            {
+                this.filterData.nation = TankCarouselFilters.FILTER_ALL_NATION;
+                this.filterData.tankType = TankCarouselFilters.FILTER_ALL_TYPES;
+                this.filterData.ready = false;
+                this.tankFilter.selectedIndex = 0;
+                this.nationFilter.selectedIndex = 0;
+            }
+            this.updateFiltersData();
+            this.tankFilter.addEventListener(ListEvent.INDEX_CHANGE,this.onVehicleTypeFilterChanged);
+            this.nationFilter.addEventListener(ListEvent.INDEX_CHANGE,this.onNationFilterChanged);
+            this.checkBoxToMain.addEventListener(Event.SELECT,this.onFilterCheckBoxChanged);
+        }
+        
+        private function showHideFilters() : void
+        {
+            updateVisibleSlotsCount();
+            var _loc1_:Boolean = _visibleSlots < this._createdRendersListByCompDescrLength || !(this._createdRendersListByCompDescrLength == this._currentShowByCompactDescription.length);
+            if(!_loc1_)
+            {
+                leftArrow.x = this.vehicleFilters.x;
+                this.vehicleFilters.visible = false;
+                this.vehicleFilters.close();
+            }
+            else if(_loc1_)
+            {
+                leftArrow.x = this.vehicleFilters.x + this.vehicleFilters.width + FILTERS_CAROUSEL_OFFSET ^ 0;
+                this.vehicleFilters.visible = true;
+            }
+            
+            updateDefContainerPos();
+            if((container) && (slidingIntervalId == 0) && !isTween)
+            {
+                container.x = _defContainerPos - currentFirstRenderer * slotWidth;
+                renderersMask.x = leftArrow.x + leftArrow.width;
+                dragHitArea.x = renderersMask.x;
+            }
+            updateVisibleSlotsCount();
+        }
+        
+        private function updateFiltersData() : void
+        {
+            var _loc1_:* = NaN;
+            var _loc2_:* = NaN;
+            if(!initialized)
+            {
+                invalidate();
+                return;
+            }
+            if(this.filterDataInvalid)
+            {
+                this.filterDataInvalid = false;
+                _loc1_ = 0;
+                while(_loc1_ < this.nationFilter.dataProvider.length)
+                {
+                    if(this.nationFilter.dataProvider[_loc1_].data == this.filterData.nation)
+                    {
+                        this.nationFilter.selectedIndex = _loc1_;
+                        break;
+                    }
+                    _loc1_++;
+                }
+                _loc2_ = 0;
+                while(_loc2_ < this.tankFilter.dataProvider.length)
+                {
+                    if(this.tankFilter.dataProvider[_loc2_].data == this.filterData.tankType)
+                    {
+                        this.tankFilter.selectedIndex = _loc2_;
+                        break;
+                    }
+                    _loc2_++;
+                }
+                this.checkBoxToMain.selected = this.filterData.ready;
+            }
+        }
+        
+        private function showContextMenu(param1:Number) : void
+        {
+            App.contextMenuMgr.showNew(String(param1),CONTEXT_MENU_HANDLER_TYPE.VEHICLE,this);
+        }
+        
+        private function rebuildRenderers() : void
+        {
+            var _loc1_:* = 0;
+            var _loc2_:* = 0;
+            var _loc3_:IListItemRenderer = null;
+            var _loc4_:Vector.<VehicleCarouselVO> = null;
+            if(this._createdRendersListByCompDescr == null)
+            {
+                this._createdRendersListByCompDescr = {};
+            }
+            _loc4_ = this._vehiclesVOManager.getRemoved();
+            _loc2_ = _loc4_.length;
+            var _loc5_:VehicleCarouselVO = null;
+            _loc1_ = 0;
+            while(_loc1_ < _loc2_)
+            {
+                _loc5_ = _loc4_[_loc1_];
+                if(this._createdRendersListByCompDescr[_loc5_.compactDescr])
+                {
+                    _loc3_ = this._createdRendersListByCompDescr[_loc5_.compactDescr];
+                    this.cleanUpRenderer(_loc3_);
+                    delete this._createdRendersListByCompDescr[_loc5_.compactDescr];
+                    true;
+                }
+                _loc1_++;
+            }
+            _loc4_ = this._vehiclesVOManager.getAdded();
+            _loc2_ = _loc4_.length;
+            _loc1_ = 0;
+            while(_loc1_ < _loc2_)
+            {
+                _loc3_ = createRenderer(_loc1_);
+                if(_loc3_ == null)
+                {
+                    break;
+                }
+                _loc5_ = _loc4_[_loc1_];
+                if(!this._createdRendersListByCompDescr[_loc5_.compactDescr])
+                {
+                    this._createdRendersListByCompDescr[_loc5_.compactDescr] = _loc3_;
+                    container.addChild(_loc3_ as DisplayObject);
+                    this.populateRendererData(_loc1_,_loc3_,_loc5_);
+                }
+                _loc1_++;
+            }
+            _loc4_ = this._vehiclesVOManager.getUpdated();
+            _loc2_ = _loc4_.length;
+            _loc1_ = 0;
+            while(_loc1_ < _loc2_)
+            {
+                _loc5_ = _loc4_[_loc1_];
+                if(this._createdRendersListByCompDescr[_loc5_.compactDescr])
+                {
+                    _loc3_ = this._createdRendersListByCompDescr[_loc5_.compactDescr];
+                    this.populateRendererData(_loc1_,_loc3_,_loc5_,true);
+                }
+                _loc1_++;
+            }
+            this.updateCreatedRenderersLength();
+            invalidate(InvalidationType.RENDERERS);
+        }
+        
+        private function updateCreatedRenderersLength() : void
+        {
+            var _loc2_:String = null;
+            var _loc1_:Number = 0;
+            if(this._createdRendersListByCompDescr)
+            {
+                for(_loc2_ in this._createdRendersListByCompDescr)
+                {
+                    _loc1_++;
+                }
+            }
+            this._createdRendersListByCompDescrLength = _loc1_;
+        }
+        
+        private function populateRendererData(param1:Number, param2:IListItemRenderer, param3:VehicleCarouselVO, param4:Boolean = false, param5:Boolean = false) : void
+        {
+            var _loc8_:ListData = null;
+            var _loc6_:DisplayObject = param2 as DisplayObject;
+            var _loc7_:TankCarouselItemRenderer = param2 as TankCarouselItemRenderer;
+            _loc7_.dragEnabled = dragEnabled;
+            param3.enabled = this.getItemEnabledState(param3);
+            _loc7_.setDataVO(param3);
+            if(!param4)
+            {
+                _loc8_ = new ListData(param1,param3.label,param3.compactDescr == this._selectedVehicleCompactID);
+                _loc7_.setListData(_loc8_);
+                _loc7_.validateNow();
+                _loc6_.visible = false;
+                if(param3.compactDescr == this._selectedVehicleCompactID)
+                {
+                    selectedItemRenderer = param2;
+                }
+            }
+            else if(param5)
+            {
+                _loc6_.visible = true;
+            }
+            
+        }
+        
+        private function getItemEnabledState(param1:VehicleCarouselVO) : Boolean
+        {
+            return param1.stat == VehicleState.IN_PREBATTLE || (this.enabled);
+        }
+        
+        private function getRendererByCompactDescr(param1:Number) : IListItemRenderer
+        {
+            var _loc2_:IListItemRenderer = this._createdRendersListByCompDescr[param1];
+            return _loc2_;
+        }
+        
+        private function removeRendererFromShowByCompactDescr(param1:Number) : void
+        {
+            var _loc3_:DisplayObject = null;
+            var _loc2_:IListItemRenderer = this.getRendererByCompactDescr(param1);
+            if(_loc2_)
+            {
+                _loc3_ = _loc2_ as DisplayObject;
+                _loc3_.visible = false;
+            }
+        }
+        
+        private function insertRendererToShowByNum(param1:Number, param2:Number) : void
+        {
+            var _loc3_:IListItemRenderer = this.getRendererByCompactDescr(param2);
+            if(_loc3_)
+            {
+                this._currentShowRendersByIndex[param1] = _loc3_;
+                _renderers.push(_loc3_);
+            }
+        }
+        
+        private function updateEmptySlots() : void
+        {
+            if(!_renderers)
+            {
+                return;
+            }
+            this.removeEmptySlots();
+            this.addEmptySlots();
+        }
+        
+        private function removeEmptySlots() : void
+        {
+            var _loc1_:IListItemRenderer = null;
+            var _loc2_:VehicleCarouselVO = null;
+            while(_renderers.length)
+            {
+                _loc1_ = getRendererAt(_renderers.length - 1,0);
+                _loc2_ = (_loc1_ as TankCarouselItemRenderer).dataVO;
+                if(_loc2_.empty)
+                {
+                    _renderers.splice(_renderers.length - 1,1);
+                    this.cleanUpRenderer(_loc1_);
+                    continue;
+                }
+                break;
+            }
+        }
+        
+        private function addEmptySlots() : void
+        {
+            var _loc1_:DisplayObject = null;
+            var _loc2_:IListItemRenderer = null;
+            while(_visibleSlots > _renderers.length)
+            {
+                _loc2_ = createRenderer(_renderers.length);
+                if(_loc2_ == null)
+                {
+                    break;
+                }
+                this.populateRendererData(_renderers.length,_loc2_,VehicleCarouselVOBuilder.instance.getDataVoForEmptySlot());
+                _loc2_.x = padding.horizontal + _renderers.length * slotWidth;
+                _renderers.push(_loc2_);
+                _loc1_ = _loc2_ as DisplayObject;
+                container.addChild(_loc1_);
+                _loc1_.visible = true;
+            }
+        }
+        
+        private function removeAdvancedSlots() : void
+        {
+            var _loc1_:IListItemRenderer = null;
+            var _loc2_:VehicleCarouselVO = null;
+            while(_renderers.length)
+            {
+                _loc1_ = getRendererAt(_renderers.length - 1,0);
+                if(!_loc1_)
+                {
+                    break;
+                }
+                _loc2_ = (_loc1_ as TankCarouselItemRenderer).dataVO;
+                if((_loc2_.buySlot) || (_loc2_.buyTank))
+                {
+                    _renderers.splice(_renderers.length - 1,1);
+                    if(this._availableSlotsForBuyVehicle <= 0 && (_loc2_.buyTank))
+                    {
+                        this.cleanUpRenderer(_loc1_);
+                        if(this._slotForBuyVehicle)
+                        {
+                            this._slotForBuyVehicle = null;
+                        }
+                    }
+                    continue;
+                }
+                break;
+            }
+        }
+        
+        private function addAdvancedSlots() : void
+        {
+            var _loc1_:DisplayObject = null;
+            if(this._availableSlotsForBuyVehicle > 0)
+            {
+                if(!this._slotForBuyVehicle)
+                {
+                    this._slotForBuyVehicle = createRenderer(_renderers.length);
+                    if(this._slotForBuyVehicle != null)
+                    {
+                        this.updateSlotForBuyVehicle(false);
+                        this._slotForBuyVehicle.x = padding.horizontal + _renderers.length * slotWidth;
+                        _renderers.push(this._slotForBuyVehicle);
+                        _loc1_ = this._slotForBuyVehicle as DisplayObject;
+                        container.addChild(_loc1_);
+                    }
+                }
+                else
+                {
+                    this._slotForBuyVehicle.x = padding.horizontal + _renderers.length * slotWidth;
+                    _renderers.push(this._slotForBuyVehicle);
+                    _loc1_ = this._slotForBuyVehicle as DisplayObject;
+                }
+                _loc1_.visible = true;
+            }
+            if(this._slotForBuySlot == null)
+            {
+                this._slotForBuySlot = createRenderer(_renderers.length);
+                if(this._slotForBuySlot != null)
+                {
+                    this.updateSlotForBuySlot(false);
+                    this._slotForBuySlot.x = padding.horizontal + _renderers.length * slotWidth;
+                    _renderers.push(this._slotForBuySlot);
+                    _loc1_ = this._slotForBuySlot as DisplayObject;
+                    container.addChild(_loc1_);
+                }
+            }
+            else
+            {
+                this._slotForBuySlot.x = padding.horizontal + _renderers.length * slotWidth;
+                _renderers.push(this._slotForBuySlot);
+                _loc1_ = this._slotForBuySlot as DisplayObject;
+            }
+            _loc1_.visible = true;
+        }
+        
+        private function repositionRenderers() : void
+        {
+            var _loc2_:IListItemRenderer = null;
+            var _loc3_:DisplayObject = null;
+            var _loc1_:Number = 0;
+            var _loc4_:Number = -1;
+            _loc1_ = 0;
+            while(_loc1_ < this._currentShowRendersByIndex.length)
+            {
+                _loc2_ = this._currentShowRendersByIndex[_loc1_];
+                _loc2_.x = padding.horizontal + _loc1_ * slotWidth;
+                _loc3_ = _loc2_ as DisplayObject;
+                _loc3_.visible = true;
+                if((_loc2_.selected) && _loc4_ == -1)
+                {
+                    _loc4_ = _loc1_;
+                }
+                _loc1_++;
+            }
+            _totalRenderers = this._availableSlotsForBuyVehicle > 0?this._currentShowRendersByIndex.length + 2:this._currentShowRendersByIndex.length + 1;
+            _loc4_ = _loc4_ == -1?0:_loc4_;
+            this.scrollToIndex(_loc4_);
+        }
+        
+        private function onFilterCheckBoxChanged(param1:Event) : void
+        {
+            this.filterData.ready = this.checkBoxToMain.selected;
+            this.onFilterChanged();
+        }
+        
+        private function onVehicleTypeFilterChanged(param1:ListEvent) : void
+        {
+            this.filterData.tankType = param1.itemData.data;
+            this.onFilterChanged();
+        }
+        
+        private function onNationFilterChanged(param1:ListEvent) : void
+        {
+            this.filterData.nation = param1.itemData.data;
+            this.onFilterChanged();
+        }
+        
+        override protected function onDispose() : void
+        {
+            super.onDispose();
+        }
+    }
+}
diff -Naur app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarouselFilters.as app/net/wg/gui/lobby/hangar/tcarousel/TankCarouselFilters.as
--- app.orig/net/wg/gui/lobby/hangar/tcarousel/TankCarouselFilters.as	2014-12-05 00:40:18.764371000 +0200
+++ app/net/wg/gui/lobby/hangar/tcarousel/TankCarouselFilters.as	2014-12-05 11:11:54.690327200 +0200
@@ -24,9 +24,9 @@
         
         public static var FILTER_READY:String = "ready";
         
-        public var nationFilter:DropDownImageText;
+        public var nationFilter:net.wg.gui.components.controls.DropDownImageText;
         
-        public var tankFilter:DropDownImageText;
+        public var tankFilter:net.wg.gui.components.controls.DropDownImageText;
         
         public var checkBoxToMain:CheckBox;
         
diff -Naur app.orig/net/wg/gui/lobby/header/LobbyHeader.as app/net/wg/gui/lobby/header/LobbyHeader.as
--- app.orig/net/wg/gui/lobby/header/LobbyHeader.as	2014-12-05 00:39:33.836118000 +0200
+++ app/net/wg/gui/lobby/header/LobbyHeader.as	2014-12-05 11:11:54.693327500 +0200
@@ -62,7 +62,7 @@
         
         private var _mainMenuHelper:MainMenuHelper;
         
-        private var _headerButtonsHelper:HeaderButtonsHelper;
+        public var _headerButtonsHelper:HeaderButtonsHelper;
         
         private var _isShowHelpLayout:Boolean = false;
         
diff -Naur app.orig/net/wg/gui/lobby/header/LobbyHeader.as.orig app/net/wg/gui/lobby/header/LobbyHeader.as.orig
--- app.orig/net/wg/gui/lobby/header/LobbyHeader.as.orig	1970-01-01 02:00:00.000000000 +0200
+++ app/net/wg/gui/lobby/header/LobbyHeader.as.orig	2014-12-05 00:39:33.836118000 +0200
@@ -0,0 +1,417 @@
+package net.wg.gui.lobby.header
+{
+    import net.wg.infrastructure.base.meta.impl.LobbyHeaderMeta;
+    import net.wg.infrastructure.base.meta.ILobbyHeaderMeta;
+    import net.wg.gui.interfaces.IHelpLayoutComponent;
+    import flash.display.Sprite;
+    import net.wg.gui.lobby.header.mainMenuButtonBar.MainMenuButtonBar;
+    import net.wg.gui.lobby.header.headerButtonBar.HeaderButtonBar;
+    import net.wg.gui.lobby.header.mainMenuButtonBar.MainMenuHelper;
+    import net.wg.gui.lobby.header.headerButtonBar.HeaderButtonsHelper;
+    import net.wg.gui.components.tooltips.ToolTipComplex;
+    import scaleform.clik.utils.Constraints;
+    import scaleform.clik.constants.ConstrainMode;
+    import scaleform.clik.events.ButtonEvent;
+    import scaleform.clik.constants.InvalidationType;
+    import net.wg.gui.lobby.header.headerButtonBar.HeaderButton;
+    import net.wg.gui.lobby.header.vo.HeaderButtonVo;
+    import net.wg.data.Aliases;
+    import net.wg.gui.lobby.header.vo.HBC_AccountDataVo;
+    import net.wg.data.VO.UserVO;
+    import net.wg.data.constants.Values;
+    import net.wg.gui.lobby.header.vo.HBC_PremDataVo;
+    import net.wg.gui.lobby.header.vo.HBC_SquadDataVo;
+    import net.wg.gui.lobby.header.vo.HBC_BattleTypeVo;
+    import net.wg.gui.lobby.header.vo.HBC_SettingsVo;
+    import net.wg.gui.lobby.header.vo.HBC_FinanceVo;
+    import net.wg.data.constants.IconsTypes;
+    import net.wg.data.managers.impl.TooltipProps;
+    import net.wg.data.constants.Tooltips;
+    import net.wg.data.constants.Linkages;
+    
+    public class LobbyHeader extends LobbyHeaderMeta implements ILobbyHeaderMeta, IHelpLayoutComponent
+    {
+        
+        public function LobbyHeader()
+        {
+            super();
+            this._headerButtonsHelper = new HeaderButtonsHelper(this.headerButtonBar);
+        }
+        
+        public static var NARROW_SCREEN:String = "narrowScreen";
+        
+        public static var WIDE_SCREEN:String = "wideScreen";
+        
+        public static var MAX_SCREEN:String = "maxScreen";
+        
+        private static var BUBBLE_TOOLTIP_X:Number = 16;
+        
+        private static var BUBBLE_TOOLTIP_Y:Number = 32;
+        
+        public var centerBg:Sprite = null;
+        
+        public var resizeBg:Sprite = null;
+        
+        public var mainMenuGradient:Sprite = null;
+        
+        public var fightBtn:FightButton;
+        
+        public var mainMenuButtonBar:MainMenuButtonBar;
+        
+        public var headerButtonBar:HeaderButtonBar;
+        
+        private var _mainMenuHelper:MainMenuHelper;
+        
+        private var _headerButtonsHelper:HeaderButtonsHelper;
+        
+        private var _isShowHelpLayout:Boolean = false;
+        
+        private var _bubbleTooltip:ToolTipComplex;
+        
+        private var _currentScreen:String = "";
+        
+        private var NARROW_SCREEN_SIZE:Number = 1024;
+        
+        private var WIDE_SCREEN_SIZE:Number = 1280;
+        
+        private var MAX_SCREEN_SIZE:Number = 1600;
+        
+        override protected function onPopulate() : void
+        {
+            super.onPopulate();
+        }
+        
+        override protected function configUI() : void
+        {
+            super.configUI();
+            constraints = new Constraints(this,ConstrainMode.REFLOW);
+            constraints.addElement("centerBg",this.centerBg,Constraints.CENTER_H);
+            constraints.addElement("resizeBg",this.resizeBg,Constraints.LEFT | Constraints.RIGHT | Constraints.TOP);
+            constraints.addElement("fightBtn",this.fightBtn,Constraints.CENTER_H);
+            constraints.addElement("mainMenuButtonBar",this.mainMenuButtonBar,Constraints.CENTER_H);
+            constraints.addElement("mainMenuGradient",this.mainMenuGradient,Constraints.CENTER_H);
+            this.centerBg.mouseChildren = this.centerBg.mouseEnabled = false;
+            this.mainMenuGradient.mouseEnabled = false;
+            this.mainMenuGradient.mouseChildren = false;
+            this.hitArea = this.resizeBg;
+            this._mainMenuHelper = new MainMenuHelper(this.mainMenuButtonBar);
+            this.updateSize();
+            this._headerButtonsHelper.setData();
+            this.fightBtn.addEventListener(ButtonEvent.CLICK,this.onFightClick);
+            this.headerButtonBar.updateCenterItem(this.fightBtn.getRectangle());
+            this.mainMenuButtonBar.addEventListener(ButtonEvent.CLICK,this.mainMenuButtonClickHandler,false,0,true);
+            this.headerButtonBar.addEventListener(ButtonEvent.CLICK,this.headerButtonClickHandler,false,0,true);
+        }
+        
+        private function onFightClick(param1:ButtonEvent) : void
+        {
+            fightClickS(0,"");
+        }
+        
+        override protected function draw() : void
+        {
+            super.draw();
+            if(isInvalid(InvalidationType.SIZE))
+            {
+                constraints.update(width,height);
+                this.updateSize();
+            }
+        }
+        
+        private function updateSize() : void
+        {
+            this.headerButtonBar.updateCenterItem(this.fightBtn.getRectangle());
+            this._currentScreen = WIDE_SCREEN;
+            var _loc1_:Number = 0;
+            var _loc2_:Number = 0;
+            if(App.appWidth <= this.NARROW_SCREEN_SIZE)
+            {
+                this._currentScreen = NARROW_SCREEN;
+            }
+            else if(App.appWidth >= this.WIDE_SCREEN_SIZE)
+            {
+                this._currentScreen = MAX_SCREEN;
+                _loc1_ = 1;
+                _loc2_ = Math.min((App.appWidth - this.WIDE_SCREEN_SIZE) / (this.MAX_SCREEN_SIZE - this.WIDE_SCREEN_SIZE),1);
+            }
+            else
+            {
+                _loc1_ = Math.min((App.appWidth - this.NARROW_SCREEN_SIZE) / (this.WIDE_SCREEN_SIZE - this.NARROW_SCREEN_SIZE),1);
+            }
+            
+            this.headerButtonBar.updateScreen(this._currentScreen,App.appWidth,_loc1_,_loc2_);
+        }
+        
+        override protected function onDispose() : void
+        {
+            this.mainMenuButtonBar.removeEventListener(ButtonEvent.CLICK,this.mainMenuButtonClickHandler);
+            this.mainMenuButtonBar.dispose();
+            this.mainMenuButtonBar = null;
+            this.headerButtonBar.removeEventListener(ButtonEvent.CLICK,this.headerButtonClickHandler);
+            this.headerButtonBar.dispose();
+            this.headerButtonBar = null;
+            this._mainMenuHelper.dispose();
+            this._mainMenuHelper = null;
+            this.fightBtn.removeEventListener(ButtonEvent.CLICK,this.onFightClick);
+            this._headerButtonsHelper.dispose();
+            this._headerButtonsHelper = null;
+            this.disposeBubbleToolTip();
+            super.onDispose();
+        }
+        
+        protected function mainMenuButtonClickHandler(param1:ButtonEvent) : void
+        {
+            if(param1.target.data != null)
+            {
+                menuItemClickS(param1.target.data.value);
+            }
+        }
+        
+        protected function headerButtonClickHandler(param1:ButtonEvent) : void
+        {
+            var _loc2_:HeaderButton = HeaderButton(param1.target);
+            var _loc3_:HeaderButtonVo = HeaderButtonVo(_loc2_.data);
+            switch(_loc3_.id)
+            {
+                case HeaderButtonsHelper.ITEM_ID_SETTINGS:
+                    showLobbyMenuS();
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_ACCOUNT:
+                    App.popoverMgr.show(_loc2_,Aliases.ACCOUNT_POPOVER,null,_loc2_);
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_PREM:
+                    showPremiumDialogS();
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_SQUAD:
+                    showSquadS();
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_BATTLE_SELECTOR:
+                    App.popoverMgr.show(_loc2_,Aliases.BATTLE_TYPE_SELECT_POPOVER,null,_loc2_);
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_GOLD:
+                    onPaymentS();
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_SILVER:
+                    showExchangeWindowS();
+                    break;
+                case HeaderButtonsHelper.ITEM_ID_FREEXP:
+                    showExchangeXPWindowS();
+                    break;
+            }
+        }
+        
+        public function as_setScreen(param1:String) : void
+        {
+            this.mainMenuButtonBar.setDisableNav(false);
+            this._mainMenuHelper.setCurrent(param1);
+        }
+        
+        public function as_doDisableNavigation() : void
+        {
+            this.mainMenuButtonBar.setDisableNav(true);
+        }
+        
+        public function as_nameResponse(param1:String, param2:String, param3:String, param4:Boolean, param5:Boolean) : void
+        {
+            var _loc6_:HBC_AccountDataVo = HBC_AccountDataVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_ACCOUNT));
+            if(_loc6_)
+            {
+                _loc6_.userVO = new UserVO({"fullName":param1,
+                "userName":param2,
+                "clanAbbrev":param3
+            });
+            _loc6_.isTeamKiller = param4;
+            _loc6_.isClan = param5;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_ACCOUNT);
+        }
+    }
+    
+    public function as_setClanEmblem(param1:String) : void
+    {
+        var _loc2_:HBC_AccountDataVo = HBC_AccountDataVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_ACCOUNT));
+        if(_loc2_)
+        {
+            _loc2_.clanEmblemId = (param1) && !(param1 == Values.EMPTY_STR)?param1:null;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_ACCOUNT);
+        }
+    }
+    
+    public function as_setPremiumParams(param1:Boolean, param2:String, param3:String, param4:Boolean, param5:String, param6:String) : void
+    {
+        var _loc7_:HBC_PremDataVo = HBC_PremDataVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_PREM));
+        if(_loc7_)
+        {
+            _loc7_.isPrem = param1;
+            _loc7_.btnLabel = param2;
+            _loc7_.doLabel = param3;
+            _loc7_.isYear = param4;
+            _loc7_.disableTTHeader = param5;
+            _loc7_.disableTTBody = param6;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_PREM);
+        }
+    }
+    
+    public function as_updateSquad(param1:Boolean) : void
+    {
+        var _loc2_:HBC_SquadDataVo = HBC_SquadDataVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_SQUAD));
+        if(_loc2_)
+        {
+            _loc2_.isInSquad = param1;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_SQUAD);
+        }
+    }
+    
+    public function as_updateBattleType(param1:String, param2:String, param3:Boolean) : void
+    {
+        var _loc4_:HBC_BattleTypeVo = HBC_BattleTypeVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_BATTLE_SELECTOR));
+        if(_loc4_)
+        {
+            _loc4_.battleTypeName = param1;
+            _loc4_.battleTypeIcon = param2;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_BATTLE_SELECTOR);
+            this.as_doDisableHeaderButton(HeaderButtonsHelper.ITEM_ID_BATTLE_SELECTOR,param3);
+        }
+    }
+    
+    public function as_setServer(param1:String) : void
+    {
+        var _loc2_:HBC_SettingsVo = HBC_SettingsVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_SETTINGS));
+        if(_loc2_)
+        {
+            _loc2_.serverName = param1;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_SETTINGS);
+        }
+    }
+    
+    public function as_goldResponse(param1:String) : void
+    {
+        var _loc2_:HBC_FinanceVo = HBC_FinanceVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_GOLD));
+        if(_loc2_)
+        {
+            _loc2_.money = param1;
+            _loc2_.iconId = IconsTypes.GOLD;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_GOLD);
+        }
+    }
+    
+    public function as_creditsResponse(param1:String) : void
+    {
+        var _loc2_:HBC_FinanceVo = HBC_FinanceVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_SILVER));
+        if(_loc2_)
+        {
+            _loc2_.money = param1;
+            _loc2_.iconId = IconsTypes.CREDITS;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_SILVER);
+        }
+    }
+    
+    public function as_setFreeXP(param1:String, param2:Boolean) : void
+    {
+        var _loc3_:HBC_FinanceVo = HBC_FinanceVo(this._headerButtonsHelper.getContentDataById(HeaderButtonsHelper.ITEM_ID_FREEXP));
+        if(_loc3_)
+        {
+            _loc3_.money = param1;
+            _loc3_.iconId = IconsTypes.FREE_XP;
+            this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_FREEXP);
+        }
+    }
+    
+    public function as_doDisableHeaderButton(param1:String, param2:Boolean) : void
+    {
+        this._headerButtonsHelper.setButtonEnabled(param1,param2);
+    }
+    
+    public function as_setWalletStatus(param1:Object) : void
+    {
+        App.utils.voMgr.walletStatusVO.update(param1);
+        this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_GOLD);
+        this._headerButtonsHelper.invalidateDataById(HeaderButtonsHelper.ITEM_ID_FREEXP);
+    }
+    
+    public function as_showBubbleTooltip(param1:String, param2:int) : void
+    {
+        this.disposeBubbleToolTip();
+        var _loc3_:TooltipProps = new TooltipProps(Tooltips.TYPE_INFO,BUBBLE_TOOLTIP_X,BUBBLE_TOOLTIP_Y);
+        this._bubbleTooltip = App.utils.classFactory.getComponent(Linkages.TOOL_TIP_COMPLEX,ToolTipComplex);
+        addChild(this._bubbleTooltip);
+        this._bubbleTooltip.build(param1,_loc3_);
+        App.utils.scheduler.scheduleTask(this.hideBubbleTooltip,param2);
+    }
+    
+    public function showHelpLayout() : void
+    {
+        if(!this._isShowHelpLayout)
+        {
+            this._isShowHelpLayout = true;
+            App.helpLayout.createBackground();
+            this.headerButtonBar.showHelpLayout();
+        }
+    }
+    
+    public function closeHelpLayout() : void
+    {
+        if(this._isShowHelpLayout)
+        {
+            this._isShowHelpLayout = false;
+            this.hideHelpLayout();
+        }
+    }
+    
+    private function hideHelpLayout() : void
+    {
+        this.headerButtonBar.closeHelpLayout();
+    }
+    
+    private var _actualEnabledVal:Boolean;
+    
+    private var _isInCoolDown:Boolean = false;
+    
+    public function as_disableFightButton(param1:Boolean, param2:String) : void
+    {
+        this._actualEnabledVal = !param1;
+        this.fightBtn.enabled = !this._isInCoolDown?this._actualEnabledVal:!this._isInCoolDown;
+        this.fightBtn.validateNow();
+        App.toolTipMgr.hide();
+    }
+    
+    public function as_setFightButton(param1:String) : void
+    {
+        this.fightBtn.label = param1;
+        this.fightBtn.validateNow();
+    }
+    
+    public function as_setCoolDownForReady(param1:uint) : void
+    {
+        this._isInCoolDown = true;
+        App.utils.scheduler.cancelTask(this.stopReadyCoolDown);
+        this.fightBtn.enabled = false;
+        App.utils.scheduler.scheduleTask(this.stopReadyCoolDown,param1 * 1000);
+    }
+    
+    private function stopReadyCoolDown() : void
+    {
+        this._isInCoolDown = false;
+        this.fightBtn.enabled = this._actualEnabledVal;
+    }
+    
+    private function disposeBubbleToolTip() : void
+    {
+        if(this._bubbleTooltip)
+        {
+            App.utils.scheduler.cancelTask(this.hideBubbleTooltip);
+            App.utils.tweenAnimator.removeAnims(this._bubbleTooltip);
+            removeChild(this._bubbleTooltip);
+            this._bubbleTooltip.dispose();
+            this._bubbleTooltip = null;
+        }
+    }
+    
+    private function hideBubbleTooltip() : void
+    {
+        if(this._bubbleTooltip)
+        {
+            App.utils.tweenAnimator.addFadeOutAnim(this._bubbleTooltip,null);
+        }
+    }
+}
+}
diff -Naur app.orig/net/wg/gui/lobby/profile/ProfileTabNavigator.as app/net/wg/gui/lobby/profile/ProfileTabNavigator.as
--- app.orig/net/wg/gui/lobby/profile/ProfileTabNavigator.as	2014-12-05 00:37:14.079432800 +0200
+++ app/net/wg/gui/lobby/profile/ProfileTabNavigator.as	2014-12-05 11:11:54.698328000 +0200
@@ -36,7 +36,7 @@
         
         public var viewStack:ResizableViewStack;
         
-        private var initData:ProfileMenuInfoVO;
+        public var initData:ProfileMenuInfoVO;
         
         private var _sectionsDataUtil:LinkageUtils;
         
diff -Naur app.orig/net/wg/gui/messenger/ChannelComponent.as app/net/wg/gui/messenger/ChannelComponent.as
--- app.orig/net/wg/gui/messenger/ChannelComponent.as	2014-12-05 00:39:58.878316000 +0200
+++ app/net/wg/gui/messenger/ChannelComponent.as	2014-12-05 11:11:54.700328200 +0200
@@ -28,7 +28,7 @@
         
         public var messageAreaScrollBar:ScrollBar = null;
         
-        public var messageArea:TextAreaSimple = null;
+        public var messageArea:net.wg.gui.components.advanced.TextAreaSimple = null;
         
         public var messageInput:TextInput = null;
         
diff -Naur app.orig/net/wg/gui/notification/NotificationPopUpViewer.as app/net/wg/gui/notification/NotificationPopUpViewer.as
--- app.orig/net/wg/gui/notification/NotificationPopUpViewer.as	2014-12-05 00:41:25.042564700 +0200
+++ app/net/wg/gui/notification/NotificationPopUpViewer.as	2014-12-05 11:11:54.706328800 +0200
@@ -45,7 +45,7 @@
     
     private var maxAvailaleMessagesCount:uint = 5;
     
-    private var popupClass:Class;
+    public var popupClass:Class;
     
     private var animationManager:ExcludeTweenManager;
     
diff -Naur app.orig/net/wg/gui/prebattle/squad/SquadItemRenderer.as app/net/wg/gui/prebattle/squad/SquadItemRenderer.as
--- app.orig/net/wg/gui/prebattle/squad/SquadItemRenderer.as	2014-12-05 00:33:19.813544300 +0200
+++ app/net/wg/gui/prebattle/squad/SquadItemRenderer.as	2014-12-05 11:11:54.711329300 +0200
@@ -171,7 +171,7 @@
                 }
                 this.setSpeakers(this.model.isPlayerSpeaking,true);
                 textField.alpha = this.vehicleNameField.alpha = 1;
-                _loc1_ = this.model.getStateString();
+                var _loc1_:* = this.model.getStateString();
                 if(_loc1_ != PrebattleStateString.UNKNOWN)
                 {
                     this.statusString = _loc1_;
@@ -186,8 +186,8 @@
                         this.showToolTips();
                     }
                 }
-                _loc2_ = 4.290295975E9;
-                _loc3_ = _loc2_;
+                var _loc2_:* = 4.290295975E9;
+                var _loc3_:* = _loc2_;
                 this.updateVoiceWave();
                 _loc3_ = this.model.getCurrentColor();
                 if(!isNaN(_loc3_))
diff -Naur app.orig/net/wg/gui/rally/events/RallyViewsEvent.as app/net/wg/gui/rally/events/RallyViewsEvent.as
--- app.orig/net/wg/gui/rally/events/RallyViewsEvent.as	2014-12-05 00:38:57.679999500 +0200
+++ app/net/wg/gui/rally/events/RallyViewsEvent.as	2014-12-05 11:11:54.714329600 +0200
@@ -41,7 +41,7 @@
         
         public static var VEH_BTN_ROLL_OUT:String = "vehBtnRollOut";
         
-        public var data;
+        public var data:*;
         
         override public function clone() : Event
         {
diff -Naur app.orig/net/wg/infrastructure/managers/IContainerManager.as app/net/wg/infrastructure/managers/IContainerManager.as
--- app.orig/net/wg/infrastructure/managers/IContainerManager.as	2014-12-05 00:31:29.560507100 +0200
+++ app/net/wg/infrastructure/managers/IContainerManager.as	2014-12-05 11:11:54.717329900 +0200
@@ -15,6 +15,8 @@
         
         function isModalViewsExisting() : Boolean;
         
+        function get loader() : ILoaderManager;
+
         function set loader(param1:ILoaderManager) : void;
         
         function get lastFocusedView() : IView;
diff -Naur app.orig/net/wg/infrastructure/managers/impl/ContextMenuManager.as app/net/wg/infrastructure/managers/impl/ContextMenuManager.as
--- app.orig/net/wg/infrastructure/managers/impl/ContextMenuManager.as	2014-12-05 00:31:59.413532300 +0200
+++ app/net/wg/infrastructure/managers/impl/ContextMenuManager.as	2014-12-05 11:32:10.010847100 +0200
@@ -48,7 +48,7 @@
         
         override protected function setOptions(param1:ContextMenuOptionsVO) : void
         {
-            assert(this._currentMenu,"Current context menu is null in setOptions call");
+            //assert(this._currentMenu,"Current context menu is null in setOptions call");
             this._currentMenu.build(param1.options,this._currentMenu.clickPoint);
         }
         
diff -Naur app.orig/org/idmedia/as3commons/util/EntrySetIterator.as app/org/idmedia/as3commons/util/EntrySetIterator.as
--- app.orig/org/idmedia/as3commons/util/EntrySetIterator.as	2014-12-05 00:44:45.056437500 +0200
+++ app/org/idmedia/as3commons/util/EntrySetIterator.as	2014-12-05 11:11:54.720330200 +0200
@@ -45,7 +45,7 @@
             }
             else
             {
-                _loc1_ = this.current.getKey();
+                var _loc1_:* = this.current.getKey();
                 this.current = null;
                 this.s.removeEntryForKey(_loc1_);
                 return;
diff -Naur app.orig/org/idmedia/as3commons/util/HashMap.as app/org/idmedia/as3commons/util/HashMap.as
--- app.orig/org/idmedia/as3commons/util/HashMap.as	2014-12-05 00:41:41.688619000 +0200
+++ app/org/idmedia/as3commons/util/HashMap.as	2014-12-05 11:11:54.722330400 +0200
@@ -58,9 +58,9 @@
         this.value = param2;
     }
     
-    private var key;
+    private var key:*;
     
-    private var value;
+    private var value:*;
     
     public function getKey() : *
     {
diff -Naur app.orig/scaleform/clik/controls/ButtonGroup.as app/scaleform/clik/controls/ButtonGroup.as
--- app.orig/scaleform/clik/controls/ButtonGroup.as	2014-12-05 00:40:33.407416800 +0200
+++ app/scaleform/clik/controls/ButtonGroup.as	2014-12-05 11:11:54.725330700 +0200
@@ -68,6 +68,7 @@
                 _loc1_ = _loc2_ as DisplayObjectContainer;
                 return _loc1_;
             }
+            return null;
         }
         
         public function addButton(param1:Button) : void
diff -Naur app.orig/scaleform/clik/ui/InputDetails.as app/scaleform/clik/ui/InputDetails.as
--- app.orig/scaleform/clik/ui/InputDetails.as	2014-12-05 00:41:40.918617400 +0200
+++ app/scaleform/clik/ui/InputDetails.as	2014-12-05 11:11:54.728331000 +0200
@@ -20,7 +20,7 @@
         
         public var code:Number;
         
-        public var value;
+        public var value:*;
         
         public var navEquivalent:String;
         
